{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["useFocusedListenersChildrenAdapter","navigation","focusedListeners","React","useContext","NavigationBuilderContext","addFocusedListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"mappings":"oRAAA,oDACA,4FAce,QAASA,CAAAA,kCAAT,MAGH,IAFVC,CAAAA,UAEU,MAFVA,UAEU,CADVC,gBACU,MADVA,gBACU,uBACqBC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CADrB,CACFC,kBADE,mBACFA,kBADE,CAGV,GAAMC,CAAAA,QAAQ,CAAGJ,KAAK,CAACK,WAAN,CACf,SAACC,QAAD,CAA8C,CAC5C,GAAIR,UAAU,CAACS,SAAX,EAAJ,CAA4B,CAC1B,kBAAuBR,gBAAvB,4IAAyC,0IAA9BK,CAAAA,UAA8B,sBACXA,UAAQ,CAACE,QAAD,CADG,CAC/BE,QAD+B,YAC/BA,OAD+B,CACtBC,OADsB,YACtBA,MADsB,CAGvC,GAAID,QAAJ,CAAa,CACX,MAAO,CAAEA,OAAO,CAAPA,QAAF,CAAWC,MAAM,CAANA,OAAX,CAAP,CACD,CACF,CAED,MAAO,CAAED,OAAO,CAAE,IAAX,CAAiBC,MAAM,CAAEH,QAAQ,CAACR,UAAD,CAAjC,CAAP,CACD,CAVD,IAUO,CACL,MAAO,CAAEU,OAAO,CAAE,KAAX,CAAkBC,MAAM,CAAE,IAA1B,CAAP,CACD,CACF,CAfc,CAgBf,CAACV,gBAAD,CAAmBD,UAAnB,CAhBe,CAAjB,CAmBAE,KAAK,CAACU,SAAN,CAAgB,iBAAMP,CAAAA,kBAAN,cAAMA,kBAAkB,CAAGC,QAAH,CAAxB,EAAhB,CAAsD,CACpDD,kBADoD,CAEpDC,QAFoD,CAAtD,EAID","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport { NavigationHelpers, ParamListBase } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addFocusedListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addFocusedListener?.(listener), [\n    addFocusedListener,\n    listener,\n  ]);\n}\n"]}