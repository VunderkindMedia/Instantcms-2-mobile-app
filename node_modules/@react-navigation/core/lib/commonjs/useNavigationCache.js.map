{"version":3,"sources":["useNavigationCache.tsx"],"names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","parentNavigation","React","useContext","NavigationContext","cache","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","index","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","create","dangerouslyGetParent","dangerouslyGetState","options","o","isFocused"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as CommonActions from './CommonActions';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport NavigationContext from './NavigationContext';\n\nimport {\n  NavigationAction,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const parentNavigation = React.useContext(NavigationContext);\n\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter, parentNavigation]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route, index) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-ignore\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dangerouslyGetParent: () => parentNavigation as any,\n          dangerouslyGetState: getState,\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions(o => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (index !== state.index) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]}