{"version":3,"sources":["getPathFromState.tsx"],"names":["getPathFromState","state","options","path","current","index","route","routes","currentOptions","pattern","name","undefined","config","stringify","params","Object","entries","reduce","acc","key","value","String","split","map","p","replace","startsWith","encodeURIComponent","join","query","queryString"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\nimport { NavigationState, PartialState, Route } from './types';\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype Options = {\n  [routeName: string]:\n    | string\n    | { path: string; stringify?: StringifyConfig }\n    | Options;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     Chat: {\n *       path: 'chat/:author/:id',\n *       stringify: { author: author => author.toLowerCase() }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state?: State,\n  options: Options = {}\n): string {\n  let path = '/';\n\n  let current: State | undefined = state;\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State | undefined;\n    };\n    let currentOptions = options;\n    let pattern = route.name;\n\n    while (route.name in currentOptions) {\n      if (typeof currentOptions[route.name] === 'string') {\n        pattern = currentOptions[route.name] as string;\n        break;\n      } else if (typeof currentOptions[route.name] === 'object') {\n        if (route.state === undefined) {\n          pattern = (currentOptions[route.name] as { path: string }).path;\n          break;\n        } else {\n          currentOptions = currentOptions[route.name] as Options;\n          index = typeof route.state.index === 'number' ? route.state.index : 0;\n          route = route.state.routes[index] as Route<string> & {\n            state?: State | undefined;\n          };\n        }\n      }\n    }\n\n    const config =\n      currentOptions[route.name] !== undefined\n        ? (currentOptions[route.name] as { stringify?: StringifyConfig })\n            .stringify\n        : undefined;\n\n    const params = route.params\n      ? // Stringify all of the param values before we use them\n        Object.entries(route.params).reduce<{\n          [key: string]: string;\n        }>((acc, [key, value]) => {\n          acc[key] = config?.[key] ? config[key](value) : String(value);\n          return acc;\n        }, {})\n      : undefined;\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map(p => {\n          const name = p.replace(/^:/, '');\n\n          // If the path has a pattern for a param, put the param in the path\n          if (params && name in params && p.startsWith(':')) {\n            const value = params[name];\n            // Remove the used value from the params object since we'll use the rest for query string\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete params[name];\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (params) {\n      const query = queryString.stringify(params);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  return path;\n}\n"]}