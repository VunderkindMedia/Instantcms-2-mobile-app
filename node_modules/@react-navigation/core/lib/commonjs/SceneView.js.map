{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","React","useContext","NavigationStateContext","performTransaction","getCurrentState","useCallback","state","currentRoute","routes","find","r","key","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"yVAAA,oDACA,0DACA,8EACA,wFACA,0EACA,sF,43BAwBe,QAASA,CAAAA,SAAT,MASiB,IAL9BC,CAAAA,MAK8B,MAL9BA,MAK8B,CAJ9BC,KAI8B,MAJ9BA,KAI8B,CAH9BC,UAG8B,MAH9BA,UAG8B,CAF9BC,QAE8B,MAF9BA,QAE8B,CAD9BC,QAC8B,MAD9BA,QAC8B,uBACCC,KAAK,CAACC,UAAN,CAAiBC,2CAAjB,CADD,CACtBC,kBADsB,mBACtBA,kBADsB,CAG9B,GAAMC,CAAAA,eAAe,CAAGJ,KAAK,CAACK,WAAN,CAAkB,UAAM,CAC9C,GAAMC,CAAAA,KAAK,CAAGR,QAAQ,EAAtB,CACA,GAAMS,CAAAA,YAAY,CAAGD,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,GAAF,GAAUf,KAAK,CAACe,GAApB,EAAnB,CAArB,CAEA,MAAOJ,CAAAA,YAAY,CAAGA,YAAY,CAACD,KAAhB,CAAwBM,SAA3C,CACD,CALuB,CAKrB,CAACd,QAAD,CAAWF,KAAK,CAACe,GAAjB,CALqB,CAAxB,CAOA,GAAME,CAAAA,eAAe,CAAGb,KAAK,CAACK,WAAN,CACtB,SAACS,KAAD,CAAwE,CACtE,GAAMR,CAAAA,KAAK,CAAGR,QAAQ,EAAtB,CAEAC,QAAQ,kBACHO,KADG,EAENE,MAAM,CAAEF,KAAK,CAACE,MAAN,CAAaO,GAAb,CAAiB,SAAAL,CAAC,QACxBA,CAAAA,CAAC,CAACC,GAAF,GAAUf,KAAK,CAACe,GAAhB,kBAA2BD,CAA3B,EAA8BJ,KAAK,CAAEQ,KAArC,GAA+CJ,CADvB,EAAlB,CAFF,GAAR,CAMD,CAVqB,CAWtB,CAACZ,QAAD,CAAWF,KAAK,CAACe,GAAjB,CAAsBZ,QAAtB,CAXsB,CAAxB,CAcA,GAAMiB,CAAAA,OAAO,CAAGhB,KAAK,CAACiB,OAAN,CACd,iBAAO,CACLX,KAAK,CAAEV,KAAK,CAACU,KADR,CAELR,QAAQ,CAAEM,eAFL,CAGLL,QAAQ,CAAEc,eAHL,CAILV,kBAAkB,CAAlBA,kBAJK,CAKLQ,GAAG,CAAEf,KAAK,CAACe,GALN,CAAP,EADc,CAQd,CACEP,eADF,CAEED,kBAFF,CAGEP,KAAK,CAACe,GAHR,CAIEf,KAAK,CAACU,KAJR,CAKEO,eALF,CARc,CAAhB,CAiBA,MACE,qBAAC,0BAAD,CAAmB,QAAnB,EAA4B,KAAK,CAAEhB,UAAnC,iDACE,oBAAC,+BAAD,CAAwB,QAAxB,EAAiC,KAAK,CAAED,KAAxC,iDACE,oBAAC,2CAAD,CAAwB,QAAxB,EAAiC,KAAK,CAAEoB,OAAxC,iDACE,oBAAC,8BAAD,kDACE,oBAAC,wBAAD,EACE,IAAI,CAAErB,MAAM,CAACuB,IADf,CAGE,MAAM,CAAEvB,MAAM,CAACwB,SAAP,EAAoBxB,MAAM,CAACyB,QAHrC,CAIE,UAAU,CAAEvB,UAJd,CAKE,KAAK,CAAED,KALT,iDAOG,aAAeD,CAAAA,MAAf,EAAyBA,MAAM,CAACwB,SAAP,GAAqBP,SAA9C,CAEC,oBAAC,MAAD,CAAQ,SAAR,EAAkB,UAAU,CAAEf,UAA9B,CAA0C,KAAK,CAAED,KAAjD,iDAFD,CAGG,YAAcD,CAAAA,MAAd,EAAwBA,MAAM,CAACyB,QAAP,GAAoBR,SAA5C,CAEFjB,MAAM,CAACyB,QAAP,CAAgB,CAAEvB,UAAU,CAAVA,UAAF,CAAcD,KAAK,CAALA,KAAd,CAAhB,CAFE,CAGA,IAbN,CADF,CADF,CADF,CADF,CADF,CAyBD","sourcesContent":["import * as React from 'react';\nimport { NavigationStateContext } from './NavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  NavigationProp,\n  RouteConfig,\n  PartialState,\n} from './types';\n\ntype Props<State extends NavigationState, ScreenOptions extends object> = {\n  screen: RouteConfig<ParamListBase, string, ScreenOptions>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions>) {\n  const { performTransaction } = React.useContext(NavigationStateContext);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map(r =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      performTransaction,\n      key: route.key,\n    }),\n    [\n      getCurrentState,\n      performTransaction,\n      route.key,\n      route.state,\n      setCurrentState,\n    ]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]}