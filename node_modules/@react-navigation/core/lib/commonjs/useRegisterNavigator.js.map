{"version":3,"sources":["useRegisterNavigator.tsx"],"names":["useRegisterNavigator","React","useState","key","container","useContext","SingleNavigatorContext","undefined","Error","useEffect","register","unregister"],"mappings":"kWAAA,oDACA,wDACA,8DAMe,QAASA,CAAAA,oBAAT,EAAgC,qBAC/BC,KAAK,CAACC,QAAN,CAAe,iBAAM,sBAAN,EAAf,CAD+B,iEACtCC,GADsC,qBAE7C,GAAMC,CAAAA,SAAS,CAAGH,KAAK,CAACI,UAAN,CAAiBC,6CAAjB,CAAlB,CAEA,GAAIF,SAAS,GAAKG,SAAlB,CAA6B,CAC3B,KAAM,IAAIC,CAAAA,KAAJ,CACJ,wFADI,CAAN,CAGD,CAEDP,KAAK,CAACQ,SAAN,CAAgB,UAAM,IACZC,CAAAA,QADY,CACaN,SADb,CACZM,QADY,CACFC,UADE,CACaP,SADb,CACFO,UADE,CAGpBD,QAAQ,CAACP,GAAD,CAAR,CAEA,MAAO,kBAAMQ,CAAAA,UAAU,CAACR,GAAD,CAAhB,EAAP,CACD,CAND,CAMG,CAACC,SAAD,CAAYD,GAAZ,CANH,EAOD","sourcesContent":["import * as React from 'react';\nimport shortid from 'shortid';\nimport { SingleNavigatorContext } from './EnsureSingleNavigator';\n\n/**\n * Register a navigator in the parent context (either a navigation container or a screen).\n * This is used to prevent multiple navigators under a single container or screen.\n */\nexport default function useRegisterNavigator() {\n  const [key] = React.useState(() => shortid());\n  const container = React.useContext(SingleNavigatorContext);\n\n  if (container === undefined) {\n    throw new Error(\n      \"Couldn't register the navigator. Have you wrapped your app with 'NavigationContainer'?\"\n    );\n  }\n\n  React.useEffect(() => {\n    const { register, unregister } = container;\n\n    register(key);\n\n    return () => unregister(key);\n  }, [container, key]);\n}\n"]}