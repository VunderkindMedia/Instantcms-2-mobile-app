{"version":3,"sources":["useDevTools.tsx"],"names":["useDevTools","name","reset","state","devToolsRef","React","useRef","process","env","NODE_ENV","global","__REDUX_DEVTOOLS_EXTENSION__","current","undefined","connect","devTools","lastStateRef","actions","useEffect","init","subscribe","message","type","JSON","parse","trackState","useCallback","getState","length","send","shift","pop","trackAction","action","push"],"mappings":"0KAAA,oDAiCe,QAASA,CAAAA,WAAT,MAAsD,IAA/BC,CAAAA,IAA+B,MAA/BA,IAA+B,CAAzBC,KAAyB,MAAzBA,KAAyB,CAAlBC,KAAkB,MAAlBA,KAAkB,CACnE,GAAMC,CAAAA,WAAW,CAAGC,KAAK,CAACC,MAAN,EAApB,CAEA,GACEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,EACAC,MAAM,CAACC,4BADP,EAEAP,WAAW,CAACQ,OAAZ,GAAwBC,SAH1B,CAIE,CACAT,WAAW,CAACQ,OAAZ,CAAsBF,MAAM,CAACC,4BAAP,CAAoCG,OAApC,CAA4C,CAAEb,IAAI,CAAJA,IAAF,CAA5C,CAAtB,CACD,CAED,GAAMc,CAAAA,QAAQ,CAAGX,WAAW,CAACQ,OAA7B,CACA,GAAMI,CAAAA,YAAY,CAAGX,KAAK,CAACC,MAAN,CAAoBH,KAApB,CAArB,CACA,GAAMc,CAAAA,OAAO,CAAGZ,KAAK,CAACC,MAAN,CAA4C,EAA5C,CAAhB,CAEAD,KAAK,CAACa,SAAN,CAAgB,UAAM,CACpBH,QAAQ,MAAR,QAAAA,QAAQ,CAAEI,IAAV,CAAeH,YAAY,CAACJ,OAA5B,EACD,CAFD,CAEG,CAACG,QAAD,CAFH,EAIAV,KAAK,CAACa,SAAN,CACE,iBACEH,CAAAA,QADF,cACEA,QAAQ,CAAEK,SAAV,CAAoB,SAAAC,OAAO,CAAI,CAC7B,GAAIA,OAAO,CAACC,IAAR,GAAiB,UAAjB,EAA+BD,OAAO,CAAClB,KAA3C,CAAkD,CAChDD,KAAK,CAACqB,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAClB,KAAnB,CAAD,CAAL,CACD,CACF,CAJD,CADF,EADF,CAOE,CAACY,QAAD,CAAWb,KAAX,CAPF,EAUA,GAAMuB,CAAAA,UAAU,CAAGpB,KAAK,CAACqB,WAAN,CACjB,SAACC,QAAD,CAA2B,CACzB,GAAI,CAACZ,QAAL,CAAe,CACb,OACD,CAED,MAAOE,OAAO,CAACL,OAAR,CAAgBgB,MAAhB,CAAyB,CAAhC,CAAmC,CACjCb,QAAQ,CAACc,IAAT,CAAcZ,OAAO,CAACL,OAAR,CAAgBkB,KAAhB,EAAd,CAAuCd,YAAY,CAACJ,OAApD,EACD,CAED,GAAMT,CAAAA,KAAK,CAAGwB,QAAQ,EAAtB,CAEA,GAAIV,OAAO,CAACL,OAAR,CAAgBgB,MAApB,CAA4B,CAC1Bb,QAAQ,CAACc,IAAT,CAAcZ,OAAO,CAACL,OAAR,CAAgBmB,GAAhB,EAAd,CAAqC5B,KAArC,EACD,CAFD,IAEO,CACLY,QAAQ,CAACc,IAAT,CAAc,WAAd,CAA2B1B,KAA3B,EACD,CAEDa,YAAY,CAACJ,OAAb,CAAuBT,KAAvB,CACD,CAnBgB,CAoBjB,CAACY,QAAD,CApBiB,CAAnB,CAuBA,GAAMiB,CAAAA,WAAW,CAAG3B,KAAK,CAACqB,WAAN,CAClB,SAACO,MAAD,CAAuC,CACrC,GAAI,CAAClB,QAAL,CAAe,CACb,OACD,CAEDE,OAAO,CAACL,OAAR,CAAgBsB,IAAhB,CAAqBD,MAArB,EACD,CAPiB,CAQlB,CAAClB,QAAD,CARkB,CAApB,CAWA,MAAO,CACLiB,WAAW,CAAXA,WADK,CAELP,UAAU,CAAVA,UAFK,CAAP,CAID","sourcesContent":["import * as React from 'react';\nimport { NavigationState, NavigationAction, PartialState } from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\ntype Options = {\n  name: string;\n  reset: (state: NavigationState) => void;\n  state: State;\n};\n\ntype DevTools = {\n  init(value: any): void;\n  send(action: any, value: any): void;\n  subscribe(\n    listener: (message: { type: string; [key: string]: any }) => void\n  ): () => void;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface Global {\n      __REDUX_DEVTOOLS_EXTENSION__:\n        | {\n            connect(options: { name: string }): DevTools;\n            disconnect(): void;\n          }\n        | undefined;\n    }\n  }\n}\n\nexport default function useDevTools({ name, reset, state }: Options) {\n  const devToolsRef = React.useRef<DevTools>();\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    global.__REDUX_DEVTOOLS_EXTENSION__ &&\n    devToolsRef.current === undefined\n  ) {\n    devToolsRef.current = global.__REDUX_DEVTOOLS_EXTENSION__.connect({ name });\n  }\n\n  const devTools = devToolsRef.current;\n  const lastStateRef = React.useRef<State>(state);\n  const actions = React.useRef<(NavigationAction | string)[]>([]);\n\n  React.useEffect(() => {\n    devTools?.init(lastStateRef.current);\n  }, [devTools]);\n\n  React.useEffect(\n    () =>\n      devTools?.subscribe(message => {\n        if (message.type === 'DISPATCH' && message.state) {\n          reset(JSON.parse(message.state));\n        }\n      }),\n    [devTools, reset]\n  );\n\n  const trackState = React.useCallback(\n    (getState: () => State) => {\n      if (!devTools) {\n        return;\n      }\n\n      while (actions.current.length > 1) {\n        devTools.send(actions.current.shift(), lastStateRef.current);\n      }\n\n      const state = getState();\n\n      if (actions.current.length) {\n        devTools.send(actions.current.pop(), state);\n      } else {\n        devTools.send('@@UNKNOWN', state);\n      }\n\n      lastStateRef.current = state;\n    },\n    [devTools]\n  );\n\n  const trackAction = React.useCallback(\n    (action: NavigationAction | string) => {\n      if (!devTools) {\n        return;\n      }\n\n      actions.current.push(action);\n    },\n    [devTools]\n  );\n\n  return {\n    trackAction,\n    trackState,\n  };\n}\n"]}