{"version":3,"sources":["getActionFromState.tsx"],"names":["getActionFromState","state","payload","routes","length","route","name","params","current","screen","undefined","type"],"mappings":"+1BAiBA,cAAe,SAASA,CAAAA,kBAAT,CACbC,KADa,CAEL,CACR,GAAIC,CAAAA,OAAJ,CAEA,GAAID,KAAK,CAACE,MAAN,CAAaC,MAAb,GAAwB,CAA5B,CAA+B,CAG7B,GAAIC,CAAAA,KAAK,CAAGJ,KAAK,CAACE,MAAN,CAAa,CAAb,CAAZ,CAEAD,OAAO,CAAG,CACRI,IAAI,CAAED,KAAK,CAACC,IADJ,CAERC,MAAM,kBAAOF,KAAK,CAACE,MAAb,CAFE,CAAV,CAKA,GAAIC,CAAAA,OAAO,CAAGP,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBF,KAA9B,CACA,GAAIM,CAAAA,MAAM,CAAGL,OAAO,CAACK,MAArB,CAEA,MAAOC,OAAP,CAAgB,CACd,GAAIA,OAAO,CAACL,MAAR,CAAeC,MAAf,GAA0B,CAA9B,CAAiC,CAC/BC,KAAK,CAAGG,OAAO,CAACL,MAAR,CAAe,CAAf,CAAR,CACAI,MAAM,CAACE,MAAP,CAAgBJ,KAAK,CAACC,IAAtB,CAEA,GAAID,KAAK,CAACJ,KAAV,CAAiB,CACfM,MAAM,CAACA,MAAP,kBAAqBF,KAAK,CAACE,MAA3B,EACAA,MAAM,CAAGA,MAAM,CAACA,MAAhB,CACD,CAHD,IAGO,CACLA,MAAM,CAACA,MAAP,CAAgBF,KAAK,CAACE,MAAtB,CACD,CAEDC,OAAO,CAAGH,KAAK,CAACJ,KAAhB,CACD,CAZD,IAYO,CACLC,OAAO,CAAGQ,SAAV,CACA,MACD,CACF,CACF,CAED,GAAIR,OAAJ,CAAa,CACX,MAAO,CACLS,IAAI,CAAE,UADD,CAELT,OAAO,CAAPA,OAFK,CAAP,CAID,CAED,MAAO,CACLS,IAAI,CAAE,YADD,CAELT,OAAO,CAAED,KAFJ,CAAP,CAID","sourcesContent":["import { PartialState, NavigationState } from './types';\n\ntype NavigateParams = {\n  screen?: string;\n  params?: NavigateParams;\n};\n\ntype Action =\n  | {\n      type: 'NAVIGATE';\n      payload: { name: string; params: NavigateParams };\n    }\n  | {\n      type: 'RESET_ROOT';\n      payload: PartialState<NavigationState>;\n    };\n\nexport default function getActionFromState(\n  state: PartialState<NavigationState>\n): Action {\n  let payload: { name: string; params: NavigateParams } | undefined;\n\n  if (state.routes.length === 1) {\n    // Try to construct payload for a `NAVIGATE` action from the state\n    // This lets us preserve the navigation state and not lose it\n    let route = state.routes[0];\n\n    payload = {\n      name: route.name,\n      params: { ...route.params },\n    };\n\n    let current = state.routes[0].state;\n    let params = payload.params;\n\n    while (current) {\n      if (current.routes.length === 1) {\n        route = current.routes[0];\n        params.screen = route.name;\n\n        if (route.state) {\n          params.params = { ...route.params };\n          params = params.params;\n        } else {\n          params.params = route.params;\n        }\n\n        current = route.state;\n      } else {\n        payload = undefined;\n        break;\n      }\n    }\n  }\n\n  if (payload) {\n    return {\n      type: 'NAVIGATE',\n      payload,\n    };\n  }\n\n  return {\n    type: 'RESET_ROOT',\n    payload: state,\n  };\n}\n"]}