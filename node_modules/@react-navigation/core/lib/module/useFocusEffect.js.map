{"version":3,"sources":["useFocusEffect.tsx"],"names":["React","useNavigation","useFocusEffect","callback","navigation","useEffect","isFocused","cleanup","unsubscribeFocus","addListener","undefined","unsubscribeBlur"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAWA,cAAe,SAASC,CAAAA,cAAT,CAAwBC,QAAxB,CAAkD,CAC/D,GAAMC,CAAAA,UAAU,CAAGH,aAAa,EAAhC,CAEAD,KAAK,CAACK,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAIC,CAAAA,OAAJ,CAGA,GAAIH,UAAU,CAACE,SAAX,EAAJ,CAA4B,CAC1BC,OAAO,CAAGJ,QAAQ,EAAlB,CACAG,SAAS,CAAG,IAAZ,CACD,CAED,GAAME,CAAAA,gBAAgB,CAAGJ,UAAU,CAACK,WAAX,CAAuB,OAAvB,CAAgC,UAAM,CAG7D,GAAIH,SAAJ,CAAe,CACb,OACD,CAED,GAAIC,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDA,OAAO,CAAGJ,QAAQ,EAAlB,CACAG,SAAS,CAAG,IAAZ,CACD,CAbwB,CAAzB,CAeA,GAAMK,CAAAA,eAAe,CAAGP,UAAU,CAACK,WAAX,CAAuB,MAAvB,CAA+B,UAAM,CAC3D,GAAIF,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDA,OAAO,CAAGG,SAAV,CACAJ,SAAS,CAAG,KAAZ,CACD,CAPuB,CAAxB,CASA,MAAO,WAAM,CACX,GAAIC,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDC,gBAAgB,GAChBG,eAAe,GAChB,CAPD,CAQD,CA1CD,CA0CG,CAACR,QAAD,CAAWC,UAAX,CA1CH,EA2CD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(callback: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [callback, navigation]);\n}\n"]}