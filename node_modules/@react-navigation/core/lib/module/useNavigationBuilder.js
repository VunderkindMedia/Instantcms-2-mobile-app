import _defineProperty from"@babel/runtime/helpers/defineProperty";import _objectWithoutProperties from"@babel/runtime/helpers/objectWithoutProperties";import _toConsumableArray from"@babel/runtime/helpers/toConsumableArray";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';import{NavigationStateContext}from'./NavigationContainer';import NavigationRouteContext from'./NavigationRouteContext';import Screen from'./Screen';import{navigate}from'./CommonActions';import useEventEmitter from'./useEventEmitter';import useRegisterNavigator from'./useRegisterNavigator';import useDescriptors from'./useDescriptors';import useNavigationHelpers from'./useNavigationHelpers';import useOnAction from'./useOnAction';import useFocusEvents from'./useFocusEvents';import useOnRouteFocus from'./useOnRouteFocus';import useChildActionListeners from'./useChildActionListeners';import useFocusedListeners from'./useFocusedListeners';import useFocusedListenersChildrenAdapter from'./useFocusedListenersChildrenAdapter';import{PrivateValueStore}from'./types';import useStateGetters from'./useStateGetters';import useOnGetState from'./useOnGetState';PrivateValueStore;var isArrayEqual=function isArrayEqual(a,b){return a.length===b.length&&a.every(function(it,index){return it===b[index];});};var getRouteConfigsFromChildren=function getRouteConfigsFromChildren(children){return React.Children.toArray(children).reduce(function(acc,child){if(React.isValidElement(child)){if(child.type===Screen){acc.push(child.props);return acc;}if(child.type===React.Fragment){acc.push.apply(acc,_toConsumableArray(getRouteConfigsFromChildren(child.props.children)));return acc;}}throw new Error("A navigator can only contain 'Screen' components as its direct children (found '"+(child.type&&child.type.name?child.type.name:String(child))+"')");},[]);};export default function useNavigationBuilder(createRouter,options){useRegisterNavigator();var route=React.useContext(NavigationRouteContext);var previousRouteRef=React.useRef(route);React.useEffect(function(){previousRouteRef.current=route;},[route]);var children=options.children,rest=_objectWithoutProperties(options,["children"]);var _React$useRef=React.useRef(createRouter(_objectSpread({},rest,{},(route==null?void 0:route.params)&&typeof route.params.screen==='string'?{initialRouteName:route.params.screen}:null))),router=_React$useRef.current;var screens=getRouteConfigsFromChildren(children).reduce(function(acc,curr){if(curr.name in acc){throw new Error("A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '"+curr.name+"')");}acc[curr.name]=curr;return acc;},{});var routeNames=Object.keys(screens);var routeParamList=routeNames.reduce(function(acc,curr){var initialParams=screens[curr].initialParams;var initialParamsFromParams=(route==null?void 0:route.params)&&route.params.screen===curr?route.params.params:undefined;acc[curr]=initialParams!==undefined||initialParamsFromParams!==undefined?_objectSpread({},initialParams,{},initialParamsFromParams):undefined;return acc;},{});if(!routeNames.length){throw new Error("Couldn't find any screens for the navigator. Have you defined any screens as its children?");}var isStateValid=React.useCallback(function(state){return state.type===undefined||state.type===router.type;},[router.type]);var isStateInitialized=React.useCallback(function(state){return state!==undefined&&state.stale===false&&isStateValid(state);},[isStateValid]);var _React$useContext=React.useContext(NavigationStateContext),currentState=_React$useContext.state,getCurrentState=_React$useContext.getState,setState=_React$useContext.setState,key=_React$useContext.key,performTransaction=_React$useContext.performTransaction;var previousStateRef=React.useRef();var initializedStateRef=React.useRef();if(initializedStateRef.current===undefined||currentState!==previousStateRef.current){initializedStateRef.current=currentState===undefined||!isStateValid(currentState)?router.getInitialState({routeNames:routeNames,routeParamList:routeParamList}):router.getRehydratedState(currentState,{routeNames:routeNames,routeParamList:routeParamList});}React.useEffect(function(){previousStateRef.current=currentState;},[currentState]);var state=isStateInitialized(currentState)?currentState:initializedStateRef.current;var nextState=state;if(!isArrayEqual(state.routeNames,routeNames)){nextState=router.getStateForRouteNamesChange(state,{routeNames:routeNames,routeParamList:routeParamList});}if(previousRouteRef.current&&route&&route.params&&typeof route.params.screen==='string'&&route.params!==previousRouteRef.current.params){var updatedState=router.getStateForAction(state,navigate(route.params.screen,route.params.params),{routeNames:routeNames,routeParamList:routeParamList});nextState=updatedState!==null?router.getRehydratedState(updatedState,{routeNames:routeNames,routeParamList:routeParamList}):state;}if(state!==nextState){performTransaction(function(){setState(nextState);});}state=nextState;React.useEffect(function(){return function(){performTransaction(function(){return getCurrentState()!==undefined&&setState(undefined);});};},[]);var getState=React.useCallback(function(){var currentState=getCurrentState();return isStateInitialized(currentState)?currentState:initializedStateRef.current;},[getCurrentState,isStateInitialized]);var emitter=useEventEmitter();useFocusEvents({state:state,emitter:emitter});React.useEffect(function(){emitter.emit({type:'state',data:{state:state}});},[emitter,state]);var _useChildActionListen=useChildActionListeners(),actionListeners=_useChildActionListen.listeners,addActionListener=_useChildActionListen.addListener;var _useFocusedListeners=useFocusedListeners(),focusedListeners=_useFocusedListeners.listeners,addFocusedListener=_useFocusedListeners.addListener;var _useStateGetters=useStateGetters(),getStateForRoute=_useStateGetters.getStateForRoute,addStateGetter=_useStateGetters.addStateGetter;var onAction=useOnAction({router:router,getState:getState,setState:setState,key:key,listeners:actionListeners,routerConfigOptions:{routeNames:routeNames,routeParamList:routeParamList}});var onRouteFocus=useOnRouteFocus({router:router,key:key,getState:getState,setState:setState});var navigation=useNavigationHelpers({onAction:onAction,getState:getState,emitter:emitter,router:router});useFocusedListenersChildrenAdapter({navigation:navigation,focusedListeners:focusedListeners});useOnGetState({getState:getState,getStateForRoute:getStateForRoute});var descriptors=useDescriptors({state:state,screens:screens,navigation:navigation,screenOptions:options.screenOptions,onAction:onAction,getState:getState,setState:setState,onRouteFocus:onRouteFocus,addActionListener:addActionListener,addFocusedListener:addFocusedListener,addStateGetter:addStateGetter,router:router,emitter:emitter});return{state:state,navigation:navigation,descriptors:descriptors};}
//# sourceMappingURL=useNavigationBuilder.js.map