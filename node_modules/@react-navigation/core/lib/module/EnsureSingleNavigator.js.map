{"version":3,"sources":["EnsureSingleNavigator.tsx"],"names":["React","MULTIPLE_NAVIGATOR_ERROR","SingleNavigatorContext","createContext","undefined","EnsureSingleNavigator","children","navigatorKeyRef","useRef","value","useMemo","register","key","currentKey","current","Error","unregister"],"mappings":"+FAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAMA,GAAMC,CAAAA,wBAAwB,2NAA9B,CAEA,MAAO,IAAMC,CAAAA,sBAAsB,CAAGF,KAAK,CAACG,aAAN,CAMpCC,SANoC,CAA/B,CAWP,cAAe,SAASC,CAAAA,qBAAT,MAAoD,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,CACjE,GAAMC,CAAAA,eAAe,CAAGP,KAAK,CAACQ,MAAN,EAAxB,CAEA,GAAMC,CAAAA,KAAK,CAAGT,KAAK,CAACU,OAAN,CACZ,iBAAO,CACLC,QADK,mBACIC,GADJ,CACiB,CACpB,GAAMC,CAAAA,UAAU,CAAGN,eAAe,CAACO,OAAnC,CAEA,GAAID,UAAU,GAAKT,SAAf,EAA4BQ,GAAG,GAAKC,UAAxC,CAAoD,CAClD,KAAM,IAAIE,CAAAA,KAAJ,CAAUd,wBAAV,CAAN,CACD,CAEDM,eAAe,CAACO,OAAhB,CAA0BF,GAA1B,CACD,CATI,CAULI,UAVK,qBAUMJ,GAVN,CAUmB,CACtB,GAAMC,CAAAA,UAAU,CAAGN,eAAe,CAACO,OAAnC,CAEA,GAAIF,GAAG,GAAKC,UAAZ,CAAwB,CACtB,OACD,CAEDN,eAAe,CAACO,OAAhB,CAA0BV,SAA1B,CACD,CAlBI,CAAP,EADY,CAqBZ,EArBY,CAAd,CAwBA,MACE,qBAAC,sBAAD,CAAwB,QAAxB,EAAiC,KAAK,CAAEK,KAAxC,iDACGH,QADH,CADF,CAKD","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MULTIPLE_NAVIGATOR_ERROR = `Another navigator is already registered for this container. You likely have multiple navigators under a single \"NavigationContainer\" or \"Screen\". Make sure each navigator is under a separate \"Screen\" container.`;\n\nexport const SingleNavigatorContext = React.createContext<\n  | {\n      register(key: string): void;\n      unregister(key: string): void;\n    }\n  | undefined\n>(undefined);\n\n/**\n * Component which ensures that there's only one navigator nested under it.\n */\nexport default function EnsureSingleNavigator({ children }: Props) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const value = React.useMemo(\n    () => ({\n      register(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n\n        navigatorKeyRef.current = key;\n      },\n      unregister(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (key !== currentKey) {\n          return;\n        }\n\n        navigatorKeyRef.current = undefined;\n      },\n    }),\n    []\n  );\n\n  return (\n    <SingleNavigatorContext.Provider value={value}>\n      {children}\n    </SingleNavigatorContext.Provider>\n  );\n}\n"]}