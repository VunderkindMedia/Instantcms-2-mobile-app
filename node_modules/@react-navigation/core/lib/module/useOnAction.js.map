{"version":3,"sources":["useOnAction.tsx"],"names":["React","NavigationBuilderContext","useOnAction","router","getState","setState","key","listeners","routerConfigOptions","useContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addActionListenerParent","addActionListener","trackAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n} from './NavigationBuilderContext';\nimport {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from './types';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  listeners: ChildActionListener[];\n  routerConfigOptions: RouterConfigOptions;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  listeners,\n  routerConfigOptions,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addActionListener: addActionListenerParent,\n    trackAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target === 'string' && action.target !== state.key) {\n        return false;\n      }\n\n      let result = router.getStateForAction(\n        state,\n        action,\n        routerConfigOptionsRef.current\n      );\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        trackAction(action);\n\n        if (state !== result) {\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      getState,\n      router,\n      onActionParent,\n      trackAction,\n      onRouteFocusParent,\n      setState,\n      key,\n      listeners,\n    ]\n  );\n\n  React.useEffect(() => addActionListenerParent?.(onAction), [\n    addActionListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]}