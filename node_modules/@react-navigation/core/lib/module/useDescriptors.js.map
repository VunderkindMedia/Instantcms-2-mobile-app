{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","router","emitter","useState","options","setOptions","useContext","trackAction","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport {\n  Descriptor,\n  NavigationAction,\n  NavigationHelpers,\n  NavigationState,\n  ParamListBase,\n  RouteConfig,\n  RouteProp,\n  Router,\n} from './types';\n\ntype Options<State extends NavigationState, ScreenOptions extends object> = {\n  state: State;\n  screens: Record<string, RouteConfig<ParamListBase, string, ScreenOptions>>;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { trackAction } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      trackAction,\n    }),\n    [\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      onRouteFocus,\n      addStateGetter,\n      trackAction,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce(\n    (acc, route) => {\n      const screen = screens[route.name];\n      const navigation = navigations[route.key];\n\n      acc[route.key] = {\n        navigation,\n        render() {\n          return (\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\n              <SceneView\n                navigation={navigation}\n                route={route}\n                screen={screen}\n                getState={getState}\n                setState={setState}\n              />\n            </NavigationBuilderContext.Provider>\n          );\n        },\n        options: {\n          // The default `screenOptions` passed to the navigator\n          ...(typeof screenOptions === 'object' || screenOptions == null\n            ? screenOptions\n            : screenOptions({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The `options` prop passed to `Screen` elements\n          ...(typeof screen.options === 'object' || screen.options == null\n            ? screen.options\n            : screen.options({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The options set via `navigation.setOptions`\n          ...options[route.key],\n        },\n      };\n\n      return acc;\n    },\n    {} as {\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\n    }\n  );\n}\n"]}