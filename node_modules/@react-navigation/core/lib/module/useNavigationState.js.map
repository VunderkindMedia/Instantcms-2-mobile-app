{"version":3,"sources":["useNavigationState.tsx"],"names":["React","useNavigation","useNavigationState","selector","navigation","useState","dangerouslyGetState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"mappings":"iEAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAUA,cAAe,SAASC,CAAAA,kBAAT,CAA+BC,QAA/B,CAAyD,CACtE,GAAMC,CAAAA,UAAU,CAAGH,aAAa,EAAhC,CADsE,oBAKhDD,KAAK,CAACK,QAAN,CAAe,iBACnCF,CAAAA,QAAQ,CAACC,UAAU,CAACE,mBAAX,EAAD,CAD2B,EAAf,CALgD,oDAK7DC,SAL6D,qBAUtE,GAAMC,CAAAA,WAAW,CAAGR,KAAK,CAACS,MAAN,CAAaN,QAAb,CAApB,CAEAH,KAAK,CAACU,SAAN,CAAgB,UAAM,CACpBF,WAAW,CAACG,OAAZ,CAAsBR,QAAtB,CACD,CAFD,EAIAH,KAAK,CAACU,SAAN,CAAgB,UAAM,CACpB,GAAME,CAAAA,WAAW,CAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,CAAgC,SAAAC,CAAC,CAAI,CACvDP,SAAS,CAACC,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT,CACD,CAFmB,CAApB,CAIA,MAAOJ,CAAAA,WAAP,CACD,CAND,CAMG,CAACR,UAAD,CANH,EAQA,MAAOD,CAAAA,QAAQ,CAACC,UAAU,CAACE,mBAAX,EAAD,CAAf,CACD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\nimport { NavigationState } from './types';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', e => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]}