{"version":3,"file":"Notifications.types.js","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"AAwJA,MAAM,CAAN,IAAY,2BAMX;AAND,WAAY,2BAA2B;IACrC,0CAAW,CAAA;IACX,0CAAW,CAAA;IACX,kDAAmB,CAAA;IACnB,4CAAa,CAAA;IACb,0CAAW,CAAA;AACb,CAAC,EANW,2BAA2B,KAA3B,2BAA2B,QAMtC","sourcesContent":["import { CalendarTriggerInput as NativeCalendarTriggerInput } from './NotificationScheduler.types';\n\nexport interface PushNotificationTrigger {\n  type: 'push';\n  remoteMessage?: FirebaseRemoteMessage;\n}\n\nexport interface CalendarNotificationTrigger {\n  type: 'calendar';\n  repeats: boolean;\n  dateComponents: {\n    era?: number;\n    year?: number;\n    month?: number;\n    day?: number;\n    hour?: number;\n    minute?: number;\n    second?: number;\n    weekday?: number;\n    weekdayOrdinal?: number;\n    quarter?: number;\n    weekOfMonth?: number;\n    weekOfYear?: number;\n    yearForWeekOfYear?: number;\n    nanosecond?: number;\n    isLeapMonth: boolean;\n    timeZone?: string;\n    calendar?: string;\n  };\n}\n\ninterface Region {\n  type: string;\n  identifier: string;\n  notifyOnEntry: boolean;\n  notifyOnExit: boolean;\n}\n\nexport interface CircularRegion extends Region {\n  type: 'circular';\n  radius: number;\n  center: {\n    latitude: number;\n    longitude: number;\n  };\n}\n\nexport interface BeaconRegion extends Region {\n  type: 'beacon';\n  notifyEntryStateOnDisplay: boolean;\n  major: number | null;\n  minor: number | null;\n  uuid?: string;\n  beaconIdentityConstraint?: {\n    uuid: string;\n    major: number | null;\n    minor: number | null;\n  };\n}\n\nexport interface LocationNotificationTrigger {\n  type: 'location';\n  repeats: boolean;\n  region: CircularRegion | BeaconRegion;\n}\n\nexport interface TimeIntervalNotificationTrigger {\n  type: 'timeInterval';\n  repeats: boolean;\n  seconds: number;\n}\n\nexport interface DailyNotificationTrigger {\n  type: 'daily';\n  hour: number;\n  minute: number;\n}\n\nexport interface FirebaseRemoteMessage {\n  collapseKey: string | null;\n  data: { [key: string]: string };\n  from: string | null;\n  messageId: string | null;\n  messageType: string | null;\n  originalPriority: number;\n  priority: number;\n  sentTime: number;\n  to: string | null;\n  ttl: number;\n  notification: null | {\n    body: string | null;\n    bodyLocalizationArgs: string[] | null;\n    bodyLocalizationKey: string | null;\n    channelId: string | null;\n    clickAction: string | null;\n    color: string | null;\n    usesDefaultLightSettings: boolean;\n    usesDefaultSound: boolean;\n    usesDefaultVibrateSettings: boolean;\n    eventTime: number | null;\n    icon: string | null;\n    imageUrl: string | null;\n    lightSettings: number[] | null;\n    link: string | null;\n    localOnly: boolean;\n    notificationCount: number | null;\n    notificationPriority: number | null;\n    sound: string | null;\n    sticky: boolean;\n    tag: string | null;\n    ticker: string | null;\n    title: string | null;\n    titleLocalizationArgs: string[] | null;\n    titleLocalizationKey: string | null;\n    vibrateTimings: number[] | null;\n    visibility: number | null;\n  };\n}\n\nexport interface UnknownNotificationTrigger {\n  type: 'unknown';\n}\n\nexport type NotificationTrigger =\n  | PushNotificationTrigger\n  | CalendarNotificationTrigger\n  | LocationNotificationTrigger\n  | TimeIntervalNotificationTrigger\n  | DailyNotificationTrigger\n  | UnknownNotificationTrigger;\n\nexport type CalendarTriggerInput = NativeCalendarTriggerInput['value'] & {\n  repeats?: boolean;\n};\nexport interface TimeIntervalTriggerInput {\n  repeats?: boolean;\n  seconds: number;\n}\nexport interface DailyTriggerInput {\n  hour: number;\n  minute: number;\n  repeats: true;\n}\nexport type DateTriggerInput = Date | number;\n\nexport type NotificationTriggerInput =\n  | null\n  | DateTriggerInput\n  | TimeIntervalTriggerInput\n  | DailyTriggerInput\n  | CalendarTriggerInput;\n\nexport enum AndroidNotificationPriority {\n  MIN = 'min',\n  LOW = 'low',\n  DEFAULT = 'default',\n  HIGH = 'high',\n  MAX = 'max',\n}\n\nexport type NotificationContent = {\n  title: string | null;\n  subtitle: string | null;\n  body: string | null;\n  data: { [key: string]: unknown };\n  sound: 'default' | 'defaultCritical' | 'custom' | null;\n} & (\n  | {\n      launchImageName: string | null;\n      badge: number | null;\n      attachments: {\n        identifier: string | null;\n        url: string | null;\n        type: string | null;\n      }[];\n      summaryArgument?: string | null;\n      summaryArgumentCount?: number;\n      categoryIdentifier: string | null;\n      threadIdentifier: string | null;\n      targetContentIdentifier?: string;\n    }\n  | {\n      badge?: number;\n      /**\n       * Format: '#AARRGGBB'\n       */\n      color?: string;\n      priority?: AndroidNotificationPriority;\n      vibrationPattern?: number[];\n    }\n);\n\nexport interface NotificationRequest {\n  identifier: string;\n  content: NotificationContent;\n  trigger: NotificationTrigger;\n}\n\nexport interface NotificationContentInput {\n  title?: string;\n  subtitle?: string;\n  body?: string;\n  data?: { [key: string]: unknown };\n  badge?: number;\n  sound?: boolean | string;\n  launchImageName?: string;\n  vibrate?: number[];\n  priority?: string;\n  /**\n   * Format: '#AARRGGBB', '#RRGGBB' or one of the named colors,\n   * see https://developer.android.com/reference/kotlin/android/graphics/Color?hl=en\n   */\n  color?: string;\n  autoDismiss?: boolean;\n  attachments?: {\n    url: string;\n    identifier?: string;\n\n    typeHint?: string;\n    hideThumbnail?: boolean;\n    thumbnailClipArea?: { x: number; y: number; width: number; height: number };\n    thumbnailTime?: number;\n  }[];\n}\n\nexport interface NotificationRequestInput {\n  identifier?: string;\n  content: NotificationContentInput;\n  trigger: NotificationTriggerInput;\n}\n\nexport interface Notification {\n  date: number;\n  request: NotificationRequest;\n}\n\nexport interface NotificationResponse {\n  notification: Notification;\n  actionIdentifier: string;\n  userText?: string;\n}\n\nexport interface NotificationBehavior {\n  shouldShowAlert: boolean;\n  shouldPlaySound: boolean;\n  shouldSetBadge: boolean;\n  priority?: AndroidNotificationPriority;\n}\n"]}